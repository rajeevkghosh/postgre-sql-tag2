# This sentinel policies enforce Usage of specific lables on each resource
# These sentinel policies enforce Wells Fargo security principles PR-172

# Import common-functions/tfplan-functions/tfplan-functions.sentinel
# with alias "plan"
import "tfplan-functions" as plan
import "types"

# List of params
param gcp_region
param owner
param application_division
param application_name
param application_role
param environment
param au

# List of mandatory labels
mandatory_labels = {
	"gcp_region":           gcp_region,
	"owner":                owner,
	"application_division": application_division,
	"application_name":     application_name,
	"application_role":     application_role,
	"environment":          environment,
	"au":                   au,
	"created":              null,
}

# Resource Types to check labels

resourceTypesMap = {
	"google_pubsub_topic":            "labels",
	"google_secret_manager_secret":   "labels",
	"google_dataproc_cluster":        "labels",
	"google_kms_crypto_key":          "labels",
	"google_bigquery_dataset":        "labels",
	"google_compute_forwarding_rule": "labels",
	"google_storage_bucket":          "labels",
	"google_spanner_instance":        "labels",
	"google_sql_database_instance":   "settings.0.user_labels",
}

# Function to Check if Labels Values are allowe

# Fetch all resources based on resourceTypes
allResources = {}
for resourceTypesMap as rt, _ {
	resources = plan.find_resources(rt)
	for resources as address, rc {
		allResources[address] = rc
	}
}

check_for_label_value_matches = func(address,rc,label_arr,label_key) {
	#print(label_arr)
	/*for label_arr as larr, rt {
		#print(keys(mandatory_labels))
		print(mandatory_labels[rt])
	}*/
	violations_value = {}
	label_chk2 = plan.evaluate_attribute(rc.change.after, label_key)
	#print(label_chk2)
	for label_chk2 as lc, hk {
		//print(lc)
		#print(types.type_of(mandatory_labels[lc]))
		print(hk)
		if lc != "created" {
		if hk in  plan.to_string(mandatory_labels[lc]) {
			print("MATCH")
		} else {
			print("no match")
			violations_value[address] = rc
		}

	}
	}
    print(violations_value)
    return(violations_value)
}

check_for_labels = func(address, rc, label_key) {
	violations = {}
	label_arr = []
	label_chk = plan.evaluate_attribute(rc.change.after, label_key)
	for label_chk as lp, rt {
		append(label_arr, lp)
	}
	for keys(mandatory_labels) as ml, rt {
		if rt not in label_arr {
			print ("VIOLATIONS")
			violations[address] = rc
	}
	}
#	print(length(violations))
	if length(violations) == 0 {
		label_value_matches = check_for_label_value_matches (address,rc,label_arr,label_key)
		#print(label_value_matches)
		if length(label_value_matches) > 0 {
			violations[address] = rc
		}
	} 

	return violations
}

msgs = {}
for allResources as address, rc {
	print(address)
	msg = check_for_labels(
		address,
		rc,
		resourceTypesMap[rc["type"]],
	)
	if length(msg) > 0 {
		msgs[address] = msg
		#print(msgs)
	}
}

main = rule { msgs }
